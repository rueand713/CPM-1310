//
//  ViewController.m
//  CloudContacts
//
//  Created by Rueben Anderson on 10/15/13.
//  Copyright (c) 2013 Rueben Anderson. All rights reserved.
//

#import "ViewController.h"
#import "DetailsViewController.h"

#define FIRST_RUN 0


@interface ViewController ()

@end

@implementation ViewController

- (void)viewDidLoad
{
    // instantiate the sqlmanager class which sets the target database and table
    sqlManager = [[SQLiteManager alloc] initWithDetails:@"CloudContacts.db" table:@"CloudContacts"];
    
    formatter = [[DateFormatter alloc] init];
    
    lastModifiedDate = [[NSDate alloc] init];
    
    refreshTable = false;
    
    [super viewDidLoad];
	// Do any additional setup after loading the view, typically from a nib.
    
    // set the session user from the kinvey credentials keystore (if any)
    appUser = [KCSUser activeUser];
    
    // check if there are any saved credentials in keystore or if the app needs to supply one
    if ([KCSUser hasSavedCredentials] == NO)
    {
        // verify that there are no active users
        if (appUser == nil)
        {
            // generate a new user and password
            [KCSUser createAutogeneratedUser:^(KCSUser *user, NSError *errorOrNil, KCSUserActionResult result) {
                
                // check for any errors creating the user
                if (errorOrNil != nil)
                {
                    NSLog(@"Error creating new user");
                }
                else
                {
                    // verify that the user was created successfully
                    if (result == KCSUserCreated)
                    {
                        NSLog(@"New user created successfully. Application may need to restart.");
                        
                        // assign the appUser the credentials created
                        appUser = user;
                        
                        // run the keystore setup
                        [self setupStore];
                    }
                }
            }];
        }
    }
    else
    {
        // user is already created and active run setup
        [self setupStore];
    }
    
    // retrieve the newest data from server
    [self retrieveKinveyData];
    
}

- (void)viewDidAppear:(BOOL)animated
{
    [super viewDidAppear:animated];
    
    if (refreshTable)
    {
        [self loadLocal];
        
        refreshTable = false;
    }
}

- (void)didReceiveMemoryWarning
{
    [super didReceiveMemoryWarning];
    // Dispose of any resources that can be recreated.
}

// method for retreiving the data stored on kinvey servers
-(void)retrieveKinveyData
{
    // retreives the server side data as an NSArray of CloudContact objects
    [kinveyStore queryWithQuery:[KCSQuery query] withCompletionBlock:^(NSArray *objectsOrNil, NSError *errorOrNil)
    {
        // check if there are any errors
        if (errorOrNil != nil)
        {
            NSLog(@"Error occurred retreiving data %@", errorOrNil);
        }
        else
        {
            // store the retrieved server data into the kinveyData array
            kinveyData = objectsOrNil;
            
            // retreive the firstRun value from the defaults
            int firstRun = [UserDefaults getNumber:@"first-run"];
            
            // check if this is the first time running the app
            if (firstRun == FIRST_RUN)
            {
                // set the first run param to not run the next time
                [UserDefaults setNumber:1 forKey:@"first-run"];
                
                lastModifiedDate = [self setNewLastDate:[NSString stringWithFormat:@"%@", [NSDate date]]];
                
                // save the lmd to preferences
                [UserDefaults setItem:(NSString *) lastModifiedDate forKey:@"lastModifiedDate"];
                
                // run the method to setup the sql
                [self setupSQL];
            }
            else
            {
                [self synchronizeData];
            }
        }
        
    } withProgressBlock:^(NSArray *objects, double percentComplete)
    {
        
    }];
}

// method for saving new data to the kinvey server
-(void)synchronizeData
{
    // retrieve the last modified date from the kinvey contact data
    CloudContact *contact = [kinveyData objectAtIndex:0];
    NSString *serverDateString = [NSString stringWithFormat:@"%@", contact.metaData.lastModifiedTime];
    
    // load the last modified date from prefs converting it to a date object
    NSString *dateString = [UserDefaults getItem:@"lastModifiedDate"];
    
    // format the dates to matching formatting style
    lastModifiedDate =  [self setNewLastDate:dateString];
    NSDate *serverDate = [self setNewLastDate:serverDateString];
    
    NSTimeInterval serverTimeInterval = [serverDate timeIntervalSince1970];
    NSTimeInterval localTimeInterval = [lastModifiedDate timeIntervalSince1970];

    
    // verify that the local and server modified dates are not equal
    if (localTimeInterval != serverTimeInterval)
    {
        // check whether the most recent modified data is on server or local data
        if (serverTimeInterval > localTimeInterval)
        {
            // update the local sql table with the server data
            [self updateLocalSQL];
        }
        else if (serverTimeInterval < localTimeInterval)
        {
            // update the server data with the local sql data
        }
    }
    
    [self loadLocal];
}

// method for setting a format a last modified date
-(NSDate *)setNewLastDate:(NSString *)date
{
    // get a new formatted date ISO 8601 (kinvey server format)
    NSDate *today = formatter.formatDate(date, @"YYYY-MM-dd hh:mm:ss zz");
    
    return today;
}

// method for querying and retreiving the local sql table data
-(void)loadLocal
{
    // retrieve the local last modified date
    lastModifiedDate = (NSDate *) [UserDefaults getItem:@"lastModifiedDate"];
    
    // set the table to 0 for default sql data representation
    sqlData = [[sqlManager select:@[@"*"] where:nil] objectForKey:@"data"];
    
    // refresh the table
    [contactTable reloadData];
}

-(void)updateLocalSQL
{
    // iterate over the kinveyData and insert it into an sql database table
    for (int i = 0; i < [kinveyData count]; i++)
    {
        CloudContact *contact = [kinveyData objectAtIndex:i];
        
        NSString *whereString = [NSString stringWithFormat:@"_id = %i", i+1];
        
        // extract the contact data into strings for setting KV pairs in NSDictionary
        NSString *firstName = [NSString stringWithFormat:@"\"%@\"", contact.firstName];
        NSString *lastName = [NSString stringWithFormat:@"\"%@\"", contact.lastName];
        NSString *phoneNumber = [NSString stringWithFormat:@"\"%@\"", contact.phoneNumber];
        NSString *emailAddress = [NSString stringWithFormat:@"\"%@\"", contact.emailAddress];
        NSNumber *age = [NSNumber numberWithInt:contact.age];
        NSNumber *height = [NSNumber numberWithInt:contact.height];
        NSNumber *weight = [NSNumber numberWithInt:contact.weight];
        NSString *entityID = [NSString stringWithFormat:@"\"%@\"", contact.entityID];
        NSNumber *employed = [NSNumber numberWithBool:contact.employed];
        NSString *lmd = [NSString stringWithFormat:@"\"%@\"", contact.metaData.lastModifiedTime];
        
        // dictionary of column names and values for table insertion
        NSDictionary *columnNames = @{
                                      @"entityID": entityID,
                                      @"firstName": firstName,
                                      @"lastName": lastName,
                                      @"phoneNumber": phoneNumber,
                                      @"emailAddress": emailAddress,
                                      @"age": age.stringValue,
                                      @"height": height.stringValue,
                                      @"weight": weight.stringValue,
                                      @"employed": employed.stringValue,
                                      @"lastModified": lmd
                                      };
        
        // insert the objects into the table
        [sqlManager update:columnNames where:whereString];
    }
}

// method for setting up the kinvey store and kinvey collections
-(void)setupStore
{
    NSDictionary *options = @{KCSStoreKeyCollectionName: @"ContactsCollection", KCSStoreKeyCollectionTemplateClass: [CloudContact class]};
    
    kinveyStore = [KCSAppdataStore storeWithOptions: options];
}

// method for setting up the sql on first app run
-(void)setupSQL
{
    NSLog(@"SQL setup");
    
    NSDictionary *columnData = @{@"entityID": @"TEXT",
                                 @"firstName": @"TEXT",
                                 @"lastName": @"TEXT",
                                 @"phoneNumber": @"TEXT",
                                 @"emailAddress": @"TEXT",
                                 @"age": @"INTEGER",
                                 @"height": @"INTEGER",
                                 @"weight": @"INTEGER",
                                 @"employed": @"INTEGER",
                                 @"lastModified":@"TEXT"
                                 };
    
    // create the table
    [sqlManager createTable:@"_id" columnNames:columnData];
    
    // iterate over the kinveyData and insert it into an sql database table
    for (int i = 0; i < [kinveyData count]; i++)
    {
        CloudContact *contact = [kinveyData objectAtIndex:i];
        
        // extract the contact data into strings for setting KV pairs in NSDictionary
        NSString *firstName = [NSString stringWithFormat:@"\"%@\"", contact.firstName];
        NSString *lastName = [NSString stringWithFormat:@"\"%@\"", contact.lastName];
        NSString *phoneNumber = [NSString stringWithFormat:@"\"%@\"", contact.phoneNumber];
        NSString *emailAddress = [NSString stringWithFormat:@"\"%@\"", contact.emailAddress];
        NSNumber *age = [NSNumber numberWithInt:contact.age];
        NSNumber *height = [NSNumber numberWithInt:contact.height];
        NSNumber *weight = [NSNumber numberWithInt:contact.weight];
        NSString *entityID = [NSString stringWithFormat:@"\"%@\"", contact.entityID];
        NSNumber *employed = [NSNumber numberWithBool:contact.employed];
        NSString *lmd = [NSString stringWithFormat:@"\"%@\"", contact.metaData.lastModifiedTime];
        
        // dictionary of column names and values for table insertion
        NSDictionary *columnNames = @{
                                      @"entityID": entityID,
                                      @"firstName": firstName,
                                      @"lastName": lastName,
                                      @"phoneNumber": phoneNumber,
                                      @"emailAddress": emailAddress,
                                      @"age": age.stringValue,
                                      @"height": height.stringValue,
                                      @"weight": weight.stringValue,
                                      @"employed": employed.stringValue,
                                      @"lastModified": lmd
                                      };
        
        // insert the objects into the table
        [sqlManager insert:columnNames where:nil];
    }
    
    [self loadLocal];
}

- (NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section
{
    int rows = [sqlData count];
    
    return rows;
}

- (void)tableView:(UITableView *)tableView didSelectRowAtIndexPath:(NSIndexPath *)indexPath
{
    // create a string to hold a WHERE clause for searching by the table id
    NSString *whereString = [NSString stringWithFormat:@"_id = %i", (indexPath.row+1)];
    
    // initiate the class query method
    NSDictionary *query = [sqlManager select:@[@"*"] where:whereString];
    
    // retrieve the contact dictionary object for the first returned row (row0) for the data key
    NSDictionary *contact = [[query objectForKey:@"data"] objectForKey:@"row0"];
    
    // instantiate a view from the storyboard
    DetailsViewController *detailsView = [self.storyboard instantiateViewControllerWithIdentifier:@"detailsView"];
    
    // verify that its valid
    if (detailsView != nil)
    {
        // pass in the contact data
        detailsView.firstNameValue = [contact objectForKey:@"firstName"];
        detailsView.lastNameValue = [contact objectForKey:@"lastName"];
        detailsView.ageValue = [contact objectForKey:@"age"];
        detailsView.weightValue = [contact objectForKey:@"weight"];
        detailsView.heightValue = [contact objectForKey:@"height"];
        detailsView.phoneNumberValue = [contact objectForKey:@"phoneNumber"];
        detailsView.emailAddressValue = [contact objectForKey:@"emailAddress"];
        detailsView.entityID = [contact objectForKey:@"entityID"];
        detailsView.metaData = [contact objectForKey:@"lastModified"];
        detailsView.idPosition = indexPath.row+1;
    
        int isEmployed = [[contact objectForKey:@"employed"] integerValue];
        
        // verify the value of the bool object and return a string value representing either true or false
        if (isEmployed)
        {
            detailsView.employedValue = @"TRUE";
        }
        else
        {
            detailsView.employedValue = @"FALSE";
        }
        
        // close the database
        [sqlManager closeDatabase];
        
        refreshTable = true;
        
        // present the view
        [self presentViewController:detailsView animated:YES completion:^{
            
            // reopen the database for the view
            [sqlManager openDatabase];
            
            [contactTable reloadData];
        }];
    }
}

- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath
{
    NSString *cellID = @"cell";
    
    int row = indexPath.row + 1;
    
    UITableViewCell *cell = [contactTable dequeueReusableCellWithIdentifier:cellID];
    
    if (cell == nil)
    {
        // if the UITableView object is nil no previous object was referenced so create one
        cell = [[UITableViewCell alloc] initWithStyle:UITableViewCellStyleDefault reuseIdentifier:cellID];
    }
    
    // create a string to hold a WHERE clause for searching by the table id
    NSString *whereString = [NSString stringWithFormat:@"_id = %i", row];
    
    // initiate the class query method
    NSDictionary *query = [sqlManager select:@[@"*"] where:whereString];
    
    // retrieve the contact dictionary object for the first returned row (row0) for the data key
    NSDictionary *contact = [[query objectForKey:@"data"] objectForKey:@"row0"];
    
    // create a new string to represent the contact name from the sqlite database
    NSString *contactName = [NSString stringWithFormat:@"%@ %@", [contact objectForKey:@"firstName"],[contact objectForKey:@"lastName"]];
    
    // set the cell label text to the text in the array at the current row
    cell.textLabel.text = contactName;
    
    return cell;
}

-(IBAction)onClick:(id)sender
{
    UIButton *button = (UIButton *) sender;
    
    if (button != nil)
    {
        if (button.tag == 0)
        {
            // add new data
        }
        else if (button.tag == 1)
        {
            // synchronize the data
            [self synchronizeData];
        }
    }
}

@end
